
	<<Method(함수)>>

		
		<함수> 
 		: 한 가지 작업을 실행하기 위해 만들어진 가장 작은 단위의 프로그램. 즉, 기능의 최소 단위
 	
 			+) 함수만 메모리에서 불러올 수 있으면 함수, 다른 것에 소속되어 있는 건 메소드 
               자바는 클래스에 함수가 들어간다. 클래스를 메모리에 올려놓지 않으면 함수를 쓸 수 없다. 이건 Method.
    		
    		[특징]           
            - 함수는 누군가 호출해야만 실행된다. 함수 스스로가 실행되는 경우는 없다. 메인함수 역시 JVM이 호출한다.
   	
   			- 함수는 실행이 완료되면 자신을 호출한 곳으로 실행 순서를 넘긴다.
   			
   			[예]
	   			class Test {
	   	   			static void abc(){
	   	   			(1)
	   	   			}	
	   	   			public static void main(String[] args){
	   	   			(2)
	   	   			abc();
	   	   			(3)
	   	   			}
	   	   		
	   	   			static void xyz(){
	   	   			(4)
	   	   			}	
   	  		 
   	   			}
   	  				 ==> (2) - (1) - (3) - 종료  (4)는 호출하지 않은 것		
   	   
		   	   	class Test {
		   	   		static void abc(){
		   	   			(1)
		   	   			xyz();
		   	   			(2)
		   	   		}	
		   	   		public static void main(String[] args){
		   	   			(3)
		   	   			abc();
		   	   			(4)
		   	   		}
		   	   		
		   	   		static void xyz(){
		   	   			(5)
		   	   }
		   	   
		   	  		 ==> (3) - (1) - (5) - (2) - (4) - 종료
   		
   		<프로그램>
   		: 함수들이 모여서 원하는 목적을 이루도록 구성하는 것.
   		  자바에서는 클래스 단위로 프로그래밍 한다. 따라서 클래스 안에 함수들이 차곡차곡 쌓인다. 
   		  (자바에서 클래스가 가질 수 있는 건 변수(데이터 기억)와 함수(데이터 가공))
 	
  
 			[함수의 구성]
 	
			 	1) 형식
			 		접근지정자    [속성]    반환값타입     함수이름(매개변수리스트...) {
			 			함수내용
			 		}
			 		
			 	2) 속성
			 		- final : 변수에 final이 붙으면 입력한 데이터 수정 불가 = 상수 (snake 표기법으로 대문자로 변수 이름 표기, 변수 선언 시 초기화도 같이 해야 함.)
			 		- static : 변수, 함수에 붙음. 스태틱 영역에 미리 올려짐. 스태틱 함수 안에서는 스태틱 멤버만 호출할 수 있음.
			 		- abstract
			 		
			 			
			 	3) 접근 지정자 : 해당 개체에 접근할 수 있는 권한을 지정해놓은 것 
			 		
			 	4) 함수 이름 : 개발자가 지정
			 	
			 	5) 매개변수 리스트 : 함수가 작업하기 위해 필요한 데이터 (함수와 함수를 호출한 곳을 매개하는 변수)
			 						
			 	6) 반환값 타입 : 함수 호출한 곳으로 보내주는 함수 실행의 결과
			 					
 					 - 결과 O : 결과 데이터 타입	  ex) plus 함수 -> int  	
 					 - 결과 X : void 	ex) println

				7) return : (결과가 있다면 내보내고) 함수 실행을 종료하라.
					  
 		
  
			 [함수 사용법] : 함수이름(데이터); 		
 		
			 [반환값 사용법] : 함수 실행 종료 후 반환값은 함수를 호출한 곳으로 돌아온다.			 	
 							  
 							 (반환값이 있는 함수라도 필요하지 않으면 반환값을 이용하지 않아도 상관 없다.)	
 
 
 					   ex) int abc(){
 					   		int k = 5;
 					   		return k;
 					       }	
 		
 						   void xyz(int a){}	
 							
 						   int lmn(int a){
 						      ...
 						      return ??;
 						   }
 						   
 						   abc(); --> (o)
 						   int a = abc(); --> (o)
 						   System.out.println(abc()); --> (o)
 						   xyz(abc()); = xyz(5);와 동일 --> (o)
 						   abc(lmn()); --> (x) 이런 함수는 만들어놓지 않았기 때문
          	  
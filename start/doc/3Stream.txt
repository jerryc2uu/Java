
	<스트림(Stream)> : 자바에서 외부 장치와 데이터를 주고 받는 유일한 방법
	
					   스트림은 모두 byte 단위로 처리
	  				   
					    데이터 -> 프로그램 : InputStream / Reader
				
					    프로그램 -> 데이터 : OutputStream / Writer
			
	
	
				+) 스트림 연결 시 주의 사항	
		
					1. 같은 방향끼리만 연결
			
					2. 같은 크기(byte기반은 byte끼리, 문자기반은 문자끼리)만 연결
			
					 	ex) FileInputStream fin = ... (바이트)
					 		BufferedOutputStream bout = new BufferedOutputStread(fin); (방향 다름) ==> (x)
					 		BufferedReader br = new BufferedReader(fin); (문자)	==>  (x)
				
		

		
-----------
			
	<byte 단위(1byte) 스트림>  :  속도 느림, 기계어 처리 가능(2진수 비트코드로 전달, 실제 실행 가능한 프로그램) 
			
			
			
			1. 타겟(기본) 스트림 : 외부 장치에 직접 연결되는 스트림 (필수)
			
		
						
				1) InputStream
						
							
					* 주요 함수
							
					- int read() : 1byte(한 문자)만 읽는 함수, 반환값은 읽은 데이터의 타입(문자)
					
					- int read(byte[] b) : 여러 byte를 읽는 함수, 반환값은 읽은 데이터의 갯수(byte 수), 읽은 결과는 byte 배열에 기억 
					
					- int read(byte[] b, int off, int len) : 여러 byte를 읽는 함수, 반환값은 읽은 데이터의 갯수(byte 수), 배열의 지정한 위치에서부터 지정한 갯수만큼만 읽는다. 
					
			
						
				2) FileIntputStream : 파일에 연결되는 입력용 스트림
				
					
					* 생성 방법(생성자) : FileIntputStream(String name//==파일 이름)
					
						
				
				3) FileOutputStream : 파일로 연결된 내보내는 방향의 스트림
				
					
					* 기본 함수 (OutputStream의 기본함수들) 
					
					- void write(int b) : 1byte만 내보내는 함수
					
					- void write(byte[] b) : 여러 byte를 내보내는 함수
					
					- void write(byte[] b, int off, int len) : 여러 문자 중 지정한 부분(int off : 시작 위치, int len : 데이터 갯수)만 내보내는 함수 
																			
				
																
				
								
			
			
			
			2. 필터(보조) 스트림 : 스트림에	연결되는 스트림 (스트림 속도 향상 및 편의 개선 목적)
					
						
						
				1) BufferedInputStream / BbufferedOutputStream  : 버퍼메모리에 데이터를 모았다가 한 번에 처리하는 기능 추가
					
						
						* 주요 함수
			
							- flush() : 강제로 버퍼메모리를 비우는 함수 (다 채워지지 않아도)
						
							
						+)  버퍼 메모리 : 다 채워지면 자동으로 꺼내지고, 1회 사용 후 소멸
						
							
							
							
				2) DataInputStream / DataOutputStream : 자바의 데이터형을 byte[]로 변환하지 않고 직접 외부장치로 입출력하는 기능 추가
						
							
						* 단점
						
							- 순서 지켜야 하며
							
							- DataOutputStream / DataInputStream가 필수 짝꿍
						
			
					
				3) PrintStream : 사용자 편의성 + 기능 향상
						
						
						
						* 장점
							
							- 내부적으로 Buffered와 연결
							
							- 사용자 편의를 위해 자바의 데이터 형태를 그대로 출력하도록
							
							- 파일(혹은 다른 장치)과 직접 연결하도록 해놓았다. (내부적으로 타겟스트림을 만들어서 장치와 연결해서 사용)
		
						
						
						* 단점
						
							- 한 쌍을 이루는 입력 스트림이 없다.
										
					
						
				
---------------
				
			
	<char 단위 (2byte) 스트림> : 속도 빠름, 문자 처리만 가능(텍스트 문서 등)   -Reader / -Writer
			
								 기계어 문서(그림 등)는 사용 불가 (byte에서 char로 형변환될 때 byte 순서가 뒤집어질 수 있기 때문)
				
									ex) 가 =  ㄱ : 0011     ㅏ : 0101
									
										00110101이 아니라 01010011로 뒤집혀 처리된다. (byte 코드는 오른쪽에서 왼쪽으로 씌여지기에)
										
										
			1. 기본(타겟) 스트림 
		
			
				1) FileReader / FileWriter :  단위만 char(문자), 처리 방식은 byte 기반 스트림과 동일
										
										 
										 
										 
			
			
			2. 보조(필터) 스트림
	
			
				1) BufferedReader / BufferedWriter : 버퍼 기능 추가
			
			
					 * 중요 함수    char의 기본 함수에는 문자열을 읽을 수 있는 함수가 없다.
					 
		
					 	- readLine() : 한 줄 단위로 한 줄씩 문자열을 그대로 읽어서 사용
										
										줄바꿈 기호(\r\n)를 발견하면 그곳에서 멈춘다. 
										
										줄 단위를 삭제하기 때문에 필요하면 줄 단위를 강제로 추가해줘야 한다.				 	
										
													 	
				 2) PrintWriter : PrintStream과 비슷
								
							- 내부적으로 Buffered와 연결
							
							- 사용자 편의를 위해 자바의 데이터 형태를 그대로 출력하도록
							
							- 파일(혹은 다른 장치)과 직접 연결하도록 해놓았다. (내부적으로 타겟스트림을 만들어서 장치와 연결해서 사용)
					   	    
					   	    
					   	    
	
			 		
--------		
		
		<참고 스트림>
		
			
			1. InputStreamReader / OutputStreamWriter  :  크기가 다른 두 개의 스트림 연결할 때 쓰는 보조 스트림
														  		
					
					사용 조건 
					
						1) 기본 스트림은 byte 기반
						
						2) 보조 스트림은 char 기반	 	
						
						3) 방향은 같아야 한다.
	
	
		
			
		
----------
			
	java.util.io 패키지 소속 클래스		 	
	
	
		<File>  :  파일에 대한 정보(이름, 위치, 크기 등)를 처리하기 위한 클래스	
			 	
	
	
			* 생성 방법  
			
				1. File(String pathname) : 파일의 경로와 이름을 지정
				
				2. File(String parent, String child) : 파일의 경로와 이름을 따로 지정							
		
				3. File(File parent//파일 객체, String child) : 파일 정보를 이용하고 파일의 이름만 다시 지정
			
				4. Files(URI uri) : 네트워크에서 다른 시스템에 있는 파일의 정보를 만든다.
		
				
					+) 자바에서는 폴더 자체도 파일로 처리한다.
			
						ex) File f = new File("c:\\"); ==> (o) 
		
		
		
			* 참고 함수
			
				1. 정보 알아내는 함수
					
					1) getName() : 파일 이름만 알아내는 함수
					
					2) getParent() : 폴더 이름만 알아내는 함수
					
					3) boolean exists() : 파일의 존재 여부 알려주는 함수
					
					4) long length() : 파일의 크기 알려주는 함수 (파일 크기는 byte 단위로 거대하기 때문)
					
						
								
				2. 	외부 작업 하기 위한 함수 : 데이터 입출력 외에 필요한 작업 하는 함수들
				
					1) delete() : 파일 삭제
					
					2) mkdir() : 폴더 1개 생성
					
					3) mkdirs() : 폴더들 생성 (계층으로 가능)
					
						ex) a/b/c/d => 4개 폴더 한 번에 생성 가능
					
					4) renameTo() : 파일 이름 변경
					
					5) list() : 폴더에 있는 파일 목록을 구함
					
		
						+) String[] list() : 파일 이름만 알아낸다.
						   
						   File[] listFiles() : 파일에 대한 모든 정보까지 알아낸다.
						   
						   						=> 일반적인 파일의 목록 알아내는 함수
						   
						   
						   String[] list(FilenameFilter filter)
						   
						   File[] listFiles(FileFilter filter)
						   
						   File[] listFiles(FilenameFilter filter)
						   
						   ==> 원하는 파일만 필터링해서 리스트를 만들 수 있는 함수	
		
			
----------

	<객체의 직렬화> : 클래스 자체를 외부 장치에 입출력
	
			- Serializable 인터페이스를 구현한 클래스만 가능
			
			  	ex) ArrayList 클래스, HashMap, HashSet, Vector ....		


			- 함수 제외 변수의 내용만 전달
			
			- 양쪽에 패키지, 클래스 이름이 동일한 클래스가 존재해야 한다.
		  

		  	  

	
		2. 보조(필터) 스트림
		
		
			1) ObjectInputStream / ObjectOutputStream (byte 기반) 
		
		 		: 네트워크에서 많이 사용하므로 Reader / Writer처럼 문자 기반은 없다.			
				
	
			
				
				
				

					   
		
			
					
	


	
	
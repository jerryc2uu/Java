# day04

논리연산자
==> 두 논리값 사이의 관계를 따지는 연산자
   ==> 즉, 논리값을 AND, OR, NOT 방식으로 관계를 알아보는 연산자
   
   주의사항 ]
       데이터는 반드시 논리값(T OR F)이어야 한다.
       
       
   기호 ]
       &    AND
       |    OR
       
       ------------------------------
       절삭연산 : 뒤는 아예 읽어보지도 않음
       
       &&   AND   -  앞이 거짓이면 뒤는 읽어보지도 않는 연산자
       ||   OR    -  앞이 참이면 뒤는 읽어보지도 않는 연산자
       
       -------------------------------
       !    NOT관계  - 참이면 거짓, 거짓이면 참으로 뒤바꿈
       
       진가표
            AND   데이터1   &   데이터2
            OR    데이터1   |   데이터2
            
            
            데이터1      데이터2         OR     AND
            true         true           true    true
            true         flase          true    false      
            false        true           true    false
            flase        false          false   false
            
     참고 ]
          컴퓨터는 한 번의 질문에 오직 한 개만 질문할 수 있다.
          동시에 프로그램이 실행되는 것처럼 보이지만 CPU는 하나의 연산만 한다. 잘게 쪼갠 시간 동안 번갈아가면서 작업함
          즉, 크면 큰 거고 작으면 작은 것이다.
          
          예를 들어서 
          데이터가 10에서 20 사이냐는 질문은 할 수 없다.
          (10 보다 크냐 그리고 20보다 작냐는 뜻이기 때문)
          그렇기 때문에 필요한 것이 논리 연산자.
          -두 개의 작업을 동시에 만족하냐고 묻는 것 (AND)
          
          예 ] 
             데이터가 10에서 20 사이냐? 라는 질문은 
             
             수학 연산식에서는
                   10 < 1 < 20   가능
                   
             컴퓨터에서는 이것은 불가능하다.
                   10 < a  &&  a < 20 라는 방식으로 질문해야 한다.
                   
      참고 ]
          이 연산자의 결과는 역시 논리값이 나온다. T OR F
          
      참고 ]
          절삭 연산
          
           ==> 특정 부분의 계산식은 계산하지 않도록 한다. (읽어보지도 않는다.)

                  &   - 절삭연산을 하지 않는다.
                  &&  - 절삭연산을 실행한다. 
                        앞의 질문이 거짓이면 뒤에 어떤 데이터가 오더라도 읽어보지 않는다.
                 
                  |   - 절삭연산을 하지 않는다.
                  ||  - 절삭연산 한다
                        앞이 참이면 뒤의 내용은 읽어보지도 않는다.
             
             예제 ]           
                   int no1 = 10;
                   int no2 = 10;
                   
                   boolean bool = (no1 > no2) && (no1++ == no2);
                   
                   System.out.println("bool : " + bool); ==> false
                   System.out.println("no1 : " + no1); ==> 10
                   System.out.println("no2 : " + no2); ==> 10
                   
                   의 결과값과
                   
                   마지막 변수의 값을 예측해서 작성하세요. 

             예]
                 
                 if  
                   
                   
                       
-----------------------------------------------------------------------------------------------------------------------
[참고]	 쓸 일은 없으니 알아두기만 할 것..

	비트연산자

           
               C언어에서 가지고 온 연산자.
               C언어는 주소를 직접 이용할 수 있으므로 필요했던 연산자이지만 
               자바는 주소를 이용할 수 없으므로 사용하지 않는 연산자.
               
               &  - 둘 다 1이면 1, 나머지는 0
               |  - 둘 중 하나가 1이면 1
               ^  -  다르면 1, 같으면 0 
               
			[예]         20 & 46 = 4      
					 20			
			     2	  10	0
			     2	  5		0
			     2    2		1
			     2	  1		0
			     2	  0		1
			     
			     	36
			     2	18	0
			     2	9	0
			     2	4	1
			     2	2	0
			     2	1	0
			     2	0	1	               
			               
			               
             
               
               		128	64	32	16	8	4	2	1
          20 		0	0	0	1	0	1	0	0
          36		0	0	1	0	0	1	0	0	
          
          
          
         
               
-----------------------------------------------------------------------------------------------------------------------               

시프트 연산자

       피연산자를 비트수(2진수)로 바꾼다. 이떄 얻는 값을 옮겨서 
       cpu를 거치지 않기에 엄청 빠름. 증감연산자와 비슷. 메모리상에서만 연산이 된다. 

         기호 ]
            부호비트는 그대로
            >> : 
            << : 
            
            부호비트도 쉬프트
            >>> : 
            
            ~  :  보수화 연산자(단항연산자)
                  ==> 각각의 비트의 숫자를 반대로 바꾸는 연산자.
            
            
----------------------------------------------------------------------------------------------------------------------              

3항 연산자 (조건 연산자) 명령이 아니고 연산자임!
==> 연산자라기 보다는 하나의 명령에 가까운 형식을 가지고 있는 연산자의 한 종류
    조건에 따라서 처리할 내용을 구분해서 처리하도록 하는 연산자 
    
    형식 ]
   변수 = (조건식) ? (조건식이 참일 때 처리내용/반환값) : (조건식이 거짓일 경우 처리 내용/반환값) 
    조건식에는 참이나 거짓만이 발생해야함
    
    참고 ] 
        조건식은 반드시 참, 거짓(논리값)으로만 만들어지도록 처리해야 한다. 다른 데이터가 오는 식은 존재하지 않음ㄴ.
     
     if 명령을 단순화 시킨 의미를 가진 명령
     
     참고 ]
        모든 연산자가 중첩처리되듯이 3항 조건 연산자도 중첩처리 될 수 있다.
        
     예 ]
        (조건식1) ? ((조건식2) ? (5) : (6)) : ((조건식3) ? (7) : (8));   
        ==> 조건식1이 참이고 조건식2가 참이면 5, 조건식 2가 거짓이면 6이다.
            조건식1이 거짓이고 조건식3이 참이면 7, 조건식3이 거짓이면 8이다.
            
-----------------------------------------------------------------------------------------------------------------------
            
            


-----------------------------------------------------------------------------------------------------------------------               
               
               
               
               
                            
             
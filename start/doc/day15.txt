#day15

	<Math클래스> 	 
	
	final class : 상속 불가 (모든 멤버를 그대로 쓰라)
    private Math() {} // 생성자가 private으로 감춰져 있어서 외부에서는 new 절대 사용 불가(new 시키지 말아라)
	
	
	<null> : 참조형 변수 선언만 한 상태, 힙에 인스턴트가 만들어지지 않은 상태 
			
		   
		   기본형 타입 배열은 자동 초기화된 데이터 존재
		   
		   ex)
			   char 아스키코드값0
			   double 0.0
		   
		   참조형 타입 배열은 아무것도 없는 null 상태
		   따로 객체를 만들어서 채워줘야 한다.
		   
		   ex) String[] tboyz;
		   
		
---------------------
	<java.util 패키지 소속 유용한 클래스들>
	  
	  
	  
	  1. Objects : 100% static 함수로만 구성된 클래스 (new 필요없음, 이미 static 영역에 올라가있으니까)
	  				
	  				클래스(객체)를 다룰 때 유용한 몇 가지 유틸리티적 함수로 구성된 클래스
	  				
	  
	  		ex) isNull(Object obj) : 객체 내용 있는지 확인하는 함수, new 시킨 결과가 있는지 확인, 인스턴스 유무 확인
	  		
	  			
	  			+) null : 참조형 변수에 주소가 없는 상태, 찾아갈 대상이 없다는 의미 
	  					  아직 사용할 준비가 되지 않았다는 의미
	  					  Heap에 만들어진 인스턴스조차 없다는 의미
	
	
	
	
	  2. Random : 난수를 발생하는 클래스
	  			  
	  		- 장점  :  Math.random()보다는 더 다양한 형태의 난수를 발생할 수 있다 
			
			+) seed : 컴퓨터에서 난수 발생 순간은 실제로 난수를 만드는 게 아니고 이미 컴퓨터 내부에는
					  난수를 기억하는 난수 테이블이 존재한다. 여기서 순서대로 꺼내서 주는 역할을 한다.
					  seed는 난수 테이블에서 난수를 꺼내는 위치를 의미		
					  
					  
					  
	  3. BigDecimal : 정수로 표현할 수 없는 숫자를 사용하기 위한 클래스
	  	
					  	정수에서 가장 큰 숫자 : long 타입 (8byte) 2^31
					  	이것보다 큰 숫자를 표현하는 클래스
					  	
					  	주로 데이터베이스와 연동할 때 데이터베이스의 숫자 타입은 
					  	오라클의 경우 NUMBER(숫자) 타입은 최대 32자리까지 사용 가능
					  	이런 형태의 데이터를 자바에서 처리하기 위해서 만든 클래스
					  	
			ex) BigDecimal big = new BigDecimal("12345678912345678901239448567"); // 숫자 형태로 못쓰기 때문에 문자열로 씀
			
			
			
-----------------------

	정규식(정규표현식) 검사	 :  주어진 문자열이 특정한 규칙에 맞도록 만들어져 있는지 확인하는 기능
								(문자열의 형식 검사)
				
											  	
			ex) 주민번호 6-7로 구성되어있는지
				아이디가 순수하게 숫자와 문자로만 구성되어있는지
				아이디가 최소 몇 글자 이상으로 만들어져 있는지
				
				모든 언어에 다 있으나 각 언어마다 사용법엔 차이가 있다.
				
				
				
			- 사용하는 클래스 
				
				: java.util.regex.Pattern = 정규식 검사에 사용할 정규식 문법을 지정할 클래스
				  
				  java.util.regex.Matcher = 정규식 검사를 실제로 실행할 클래스					
					
			
			
			+) 정규표현식 문법
				
				1. c[a-z]*  :  문자를 기록하면 반드시 그 위치에 기록한 문자가 와야 한다. c로 시작하는 문자
							   [] 안에 기록하면 그 중 하나가 와야 한다.	알파벳 소문자가 하나는 와야 한다.
							   *은 바로 앞에서 지정한 글자가 0개 이상 올 수 있다.
							   
							   => c로 시작하고 그 후에는 알파벳 소문자가 0개 이상 오면 된다는 뜻, c만 와도 됨
							   
							   
				2. c[a-z]   =>  c로 시작하고 그 다음 글자는 알파벳 소문자가 한 글자 와야 한다.
				
				
				3. c[a-zA-Z]  =>  c로 시작하고 그 다음 글자는 대소문자 알파벳 한 글자 와야 한다.
				
				
				4. c[a-zA-Z0-9]  =>  c로 시작하고 그 다음 글자는 알파벳 또는 숫자가 한글자 와야 한다.
				
				
				5. .*   :  .은 모든 문자(알파벳, 한글까지 포함)를 의미
					
						=> 어떤 문자라도 0개 이상 오면 된다.
				
				6. C.   :    첫 글자는 C로 시작하고 다음 문자는 어떤 문자라도 한 글자만 오면 된다. 
		   	
		   		




	
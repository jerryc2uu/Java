# day16

<Map 계열> : 하나의 데이터를 그 데이터를 구분할 수 있는 키값과 한 쌍으로 만들어서 기억하는 컬렉션
			 키값을 사용해서 데이터를 꺼낸다.
			 많은 데이터를 보관하는 용도보다는 적은 양의 데이터를 손쉽게 구분하여 사용할 목적으로 사용됨
			 
			 list는 인덱스가 있고 꺼낼 수 있음, set은 인덱스는 있지만 개발자는 알 수가 없음, map은 인덱스 대신 키값을 정해서 씀 		
	
	
	
	1. HashMap : 신 버전에서 나온 클래스, 사용 권장됨
	 
			HashTable : 구 버전에서 나온 클래스, 
	
			내부적으로 키값으로 정렬할 때 해쉬테이블을 이용해서 보관
	
			(키값으로 정렬할 때 기준이 해쉬코드)
	
	
	
			주요 함수
			
				1. put(Object key, Object value) : 데이터 입력
				
				2. get(Object key) : 데이터 꺼냄
					
				3. values() : 데이터들만 꺼냄
				
				4. keys() = keySet() : 키값들만 꺼냄 (반환값이 set, 키값은 중복해서 쓰면 안 된다.)
				
				
				+) keys()로 꺼낸 데이터는 Enumeration으로 반환(이 클래스는 Iterator의 구 버전)
					즉, 데이터를 순차적으로 꺼낼 수 있는 클래스이며 1회 사용 후 소멸
					
				+) HashMap에서는 키값만 꺼내는 함수가 keySet()으로 변경되었다.	
					
					
				//모르겠으면 넘어갈 것	
				+) entrySet() : Map은 반드시 키값을 알아야 꺼낼 수 있지만 이 함수를 이용하면 다른 방식으로 꺼낼 수 있다.	
								키값과 데이터를 Set으로 묶어주는 함수
								문제는 Map은 키값과 데이터가 있어야만 저장이 되지만 Set은 오직 한 개만 저장된다는 점이다.
								따라서 키값과 데이터를 하나로 묶어야만 Set에 저장이 된다. 
			
								어떻게 묶는가?
								VO 클래스 (데이터 전달용으로만 쓰는 클래스)로 묶는다.
								Map.Entry 클래스를 사용
								이 클래스 안에는 Key와 Value 변수가 은닉화되어 있고 이 변수를 사용할 수 있도록 함수를 제공하고 있다.
								두 변수를 하나로 묶어놓은 클래스가 Map.Entry 클래스다.
						
		
		2. TreeMap : TreeSet과 마찬가지로 내부에서 정렬하면서 데이터를 기억하는 Map.
					 정렬 기준으로 키값을 이용.
					 따라서 키값이 정렬되지 않는 클래스를 사용할 수 없고 필요하다면 정렬 방식을 정해서 사용해야 한다.
					   
										
			+) 기능이 필요해서가 아니라 여러 개의 데이터를 하나로 묶기 위한 목적으로 만들어진 클래스가 있다.
			
				class Tmp {
					String name;
					int age;
					
				}
				
				이런 클래스를 우리는 데이터 빈 클래스라고 부르고 Value Object(VO) 클래스라고도 부른다.
				또는 이런 클래스들은 데이터를 전달할 목적으로 사용되므로 DTO(Data Transfer Object)라고도 부른다.
						
			
			+) 컬렉션 안에는 다시 컬렉션을 입력할 수 있다.(중첩 가능)
			   컬렉션 안에는 모든 클래스를 입력할 수 있으므로 클래스의 일종인 컬렉션도 저장이 가능한 것
			
		
		


#day17

자바 공부하는 방법
	
	자바 프로그램 사용하는 방법
	
		클래스 사용하는 방법
		
			: 해당 클래스를 new시켜서 힙 메모리에 올려 놓은 후 필요한 것을 꺼내서 사용하는 것 
			
			=> new 시키면 힙에 만들어진 인스턴스의 주소를 알려줄 것이고 이것을 변수에 기억시켜서 
			  
			  그 변수에 접근해서 멤버를 사용하는 것
			  
			  ex) Abc a = new Abc();
			  
			  	  a.abc();
			  	  a.no;			

				  Abc a1; ==> (x)
				  
				  
	이후의 자바 공부법
	
		1. 클래스를 많이 만들어 본다.
		
		2. 함수를 많이 만들어 본다.
		
		3. 만든 클래스를 가져와서 사용한다.
		
		만들고 싶은 프로그램은 직접 만들어본다.
		
		
-------------------------------------------------------------------------------------------------------------------
	
	<스트림(Stream)> : 자바에서 외부 장치와 데이터를 주고 받는 유일한 방법
					   
					   빨대와 같은 역할로, 스트림을 외부 장치에 꽂은 뒤 같은 함수(빨대를 빨면)를 이용하면
					   외부 장치의 데이터가 들어온다.
			
			
					   
		* 특징
			
			1. 단방향 
				
				: 한 방향으로만 데이터를 보낼 수 있다. 데이터를 주고 받으려면 스트림은 2개가 필요하다.
			
			
			
		* 종류 (방향성)
		
			1. 데이터 -> 프로그램
				
				1) InputStream
				
				2) Reader
			
			2. 프로그램 -> 데이터
			
				1) OutputStream
				
				2) Writer
				
				
				
		* 종류 (데이터 양)
		
			1. byte 단위 (1byte) : 속도 느림, 기계어 처리 가능(2진수 비트코드로 전달, 실제 실행 가능한 프로그램) 
			
				1) InputStream
				
					* 주요 함수
					
						- int read() : 1byte(한 문자)만 읽는 함수, 반환값은 읽은 데이터의 타입(문자)
						
						- int read(byte[] b) : 여러 byte를 읽는 함수, 반환값은 읽은 데이터의 갯수(byte 수), 읽은 결과는 byte 배열에 기억 
						
						- int read(byte[] b, int off, int len) : 여러 byte를 읽는 함수, 반환값은 읽은 데이터의 갯수(byte 수), 배열의 지정한 위치에서부터 지정한 갯수만큼만 읽는다. 
						
				
				2) FileIntputStream : 파일에 연결되는 입력용 스트림
					
					* 생성 방법(생성자) : FileIntputStream(String name//==파일 이름)
					
						
				3) FileOutputStream : 파일로 연결된 내보내는 방향의 스트림
				
					* 기본 함수 (OutputStream의 기본함수들) 
					
						- void write(int b) : 1byte만 내보내는 함수
						
						- void write(byte[] b) : 여러 byte를 내보내는 함수
						
						- void write(byte[] b, int off, int len) : 여러 문자 중 지정한 부분(int off : 시작 위치, int len : 데이터 갯수)만 내보내는 함수 
																				
						
			
			2. char 단위 (2byte) : 속도 빠름, 문자 처리만 가능(txt파일 등) 
			
				1) -Reader
				
				2) -Writer
				
				
				
		* 종류 (상대방 종류)
		
			1. 타겟(기본) 스트림 : 외부 장치에 직접 연결되는 스트림
			
			2. 필터(보조) 스트림 : 스트림에	연결되는 스트림 (스트림 속도 향상 및 편의 개선 목적)
			
				+) 기본 스트림은 필수, 필터 스트림은 필요에 의한 선택
				
	
	
	
----------

	java.util.io 패키지 소속		 	
	
	
	<File>  :  파일에 대한 정보(이름, 위치, 크기 등)를 처리하기 위한 클래스	
			 			   
			 스트림은 아니다. (데이터 입출력 기능은 없다.) 외부 장치 중 가장 많이 사용하는 것이 파일이기 때문에 
	
	
		* 생성 방법  
			
			1. File(String pathname) : 파일의 경로와 이름을 지정
			
			2. File(String parent, String child) : 파일의 경로와 이름을 따로 지정							
	
			3. File(File parent//파일 객체, String child) : 파일 정보를 이용하고 파일의 이름만 다시 지정
		
			4. Files(URI uri) : 네트워크에서 다른 시스템에 있는 파일의 정보를 만든다.
	
			
				+) 자바에서는 폴더 자체도 파일로 처리한다.
		
					ex) File f = new File("c:\\"); ==> (o) 
		
		
		
		* 참고 함수
		
			1. 정보 알아내는 함수
				
				1) getName() : 파일 이름만 알아내는 함수
				
				2) getParent() : 폴더 이름만 알아내는 함수
				
				3) boolean exists() : 파일의 존재 여부 알려주는 함수
				
				4) long length() : 파일의 크기 알려주는 함수 (파일 크기는 byte 단위로 거대하기 때문)
				
					
							
			2. 	외부 작업 하기 위한 함수 : 데이터 입출력 외에 필요한 작업 하는 함수들
			
				1) delete() : 파일 삭제
				
				2) mkdir() : 폴더 1개 생성
				
				3) mkdirs() : 폴더들 생성 (계층으로 가능)
				
					ex) a/b/c/d => 한 번에 생성 가능
				
				4) renameTo() : 파일 이름 변경
				
				5) list() : 폴더에 있는 파일 목록을 구함
				
	
					+) String[] list() : 파일 이름만 알아낸다.
					   
					   File[] listFiles() : 파일에 대한 모든 정보까지 알아낸다.
					   
					   						=> 일반적인 파일의 목록 알아내는 함수
					   
					   
					   String[] list(FilenameFilter filter)
					   
					   File[] listFiles(FileFilter filter)
					   
					   File[] listFiles(FilenameFilter filter)
					   
					   ==> 원하는 파일만 필터링해서 리스트를 만들 수 있는 함수	
					   
					
	
--------

	필터 스트림 : 기본 스트림에 기능 추가, 사용자의 편의 제공 위한 보조적인 기능을 하는 스트림
	
				  기본 스트림은 필수, 필터 스트림은 선택
				  
				  필터 스트림 역시 방향성을 가지고 있으며 반드시 같은 방향끼리만 연결해야 한다.		
	
		* 종류
			
			1. BufferedInputStream / BbufferedOutputStream 
				
				: 스트림의 성능을 향상시키는 역할을 한다.
				  버퍼메모리에 데이터를 모았다가 한 번에 처리하는 기능이 추가
				  
				  버퍼 메모리 : 다 채워지면 자동으로 꺼내지고, 1회 사용 후 소멸
	
				
				* 주요 함수
					
					1) flush() : 강제로 버퍼를 비우는 함수 (데이터 꺼내는)
				
					
			2. DataInputStream / DataOutputStream 
			
				: 자바의 데이터형을 byte[]로 변환하지 않고 직접 외부장치로 입출력하는 기능 추가
				
					보통 스트림은 byte[]로만 데이터 처리, 문자 데이터 외에는 문제가 생기기 때문
					
					DataOutputStream으로 데이터를 내보낸 경우 반드시 DataInputStream으로 받아야 하며
					순서가 반드시 지켜져야 해서 잘 사용 안 함
	
						ex) int - float 저장하면 ==> int - float 읽어야 한다.	
	
			
			3. PrintStream 
				
				: 사용자 편의성 + 기능 향상
				
				* 장점
					
					1) 내부적으로 Buffered와 연결
					
					2) 사용자 편의를 위해 자바의 데이터 형태를 그대로 출력하도록
					
					3) 파일(혹은 다른 장치)과 직접 연결하도록 해놓았다. (내부적으로 타겟스트림을 만들어서 장치와 연결해서 사용)

				* 단점
				
					1) 한 쌍을 이루는 입력 스트림이 없다.
								
	
					스트림은 모두 byte 단위로 처리
	
	
	
-------------

	<char 단위 스트림> : 한 번 입출력할 때 2byte 단위로 입출력 가능
							
						기계어 상태의 내용은 사용 불가(그림 등)
						오직 텍스트 문서(문자열)에 한해서만 사용 가능 
						기계어 문서는 반드시 byte 단위의 입출력을 사용해야 하는데
						2byte가 1char가 될 때 byte 순서가 뒤집어질 수 있다.
						
						
						ex) 가
						
							ㄱ : 0011     ㅏ : 0101
							00110101이 아니라 01010011로 뒤집혀 처리된다. (byte 코드는 오른쪽에서 왼쪽으로 씌여지기에)
							
							
		* 종류 
		
			
			1. FileReader / FileWriter : 파일에 직접 연결된 타겟 스트림 
										 
										 단위만 char(문자)
										 
										 처리 방식은 byte 기반 스트림과 동일
			
			
	<관련된 필터 스트림>
	
			
			1. BufferedReader / BufferedWriter : 중간에 버퍼 기능을 추가해서 스트림의 성능 향상을 위한 보조 스트림
			
			
					 * 중요 함수    char의 기본 함수에는 문자열을 읽을 수 있는 함수가 없다.
					 
		
					 	1) readLine() : 한 줄 단위로 한 줄씩 문자열을 그대로 읽어서 사용
										
										줄바꿈 기호(\r\n)를 발견하면 그곳에서 멈춘다. 
										
										줄 단위를 삭제하기 때문에 필요하면 줄 단위를 강제로 추가해줘야 한다.				 	
										
													 	
			2. PrintWriter : PrintStream과 비슷
								
							- 버퍼 기능을 가지고 있다.
							- 직접 파일에 연결 가능  		
					   	    - 사용자 편의를 제공 (자바의 데이터형을 그대로 출력 가능)
					   	    
					   	    
					   	    
		+) 스트림 연결 시 주의 사항	
		
			1. 같은 방향끼리만 연결
			
			2. 같은 크기(byte기반은 byte끼리, 문자기반은 문자끼리)만 연결
			
			 	ex) FileInputStream fin = ... (바이트)
			 		BufferedOutputStream bout = new BufferedOutputStread(fin); (방향 다름) ==> (x)
			 		BufferedReader br = new BufferedReader(fin); (문자)	==>  (x)
			 		
--------		
		
		<참고 스트림>
		
			1. InputStreamReader / OutputStreamWriter  :  크기가 다른 두 개의 스트림 연결할 때 쓰는 보조 스트림
														  (방향은 무조건 같아야 함)			
					사용 조건 
					
						1) 기본 스트림은 byte 기반
						
						2) 보조 스트림은 char 기반	 			   	    


--------						
			
	<객체의 직렬화>
	
		: 자바의 기본형 데이터 타입 외에도 클래스 전체를 데이터 타입으로 삼아 외부 장치와 입출력할 수 있다.
			
		  이 때, 함수는 전달되지 않고 변수의 내용만 입출력이 된다.
		  
		  이처럼 클래스가 다른 장치에 전달되는 상태를 직렬화라고 한다.
		  
		  클래스에 있는 변수의 내용이 순서대로 입출력된다는 의미에서 붙여진 이름
		  
		  모든 클래스가 입출력되는 건 아니고 직렬화 가능한 클래스여야만 가능하다.
		  	  
		  Serializable 인터페이스를 구현한 클래스들만이 직렬화 가능하다.
		  
		  
		  	ex) ArrayList 클래스, HashMap, HashSet, Vector ....		
		
		  직렬화는 변수 내용만 입출력되고 클래스 구조가 전달되지 않는다.
		    => 네트워크처럼 서로 떨어진 경우 양쪽에 같은 클래스가 존재해야 한다.
		  		(변수는 대부분 private )
		  
		  이 때 양쪽에 있는 클래스는
		  	  	클래스 이름 + 패키지 이름까지 모두 동일해야 한다.
	
	
		  	  	
	 <직렬화에 사용하는 보조스트림>
		
		
		1. ObjectInputStream / ObjectOutputStream (byte 기반) 
		
		 	: 네트워크에서 많이 사용하므로 Reader / Writer처럼 문자 기반은 없다.
		 	
	
----------
	
	IO 공부
	
	1. 필요한 데이터를 파일에 저장
	
	2. 저장된 내용을 불러와서 사용
					 	 	  	  
		실행 가능 = byte 기반
		내용만 있다 = 문자 기반
		
												
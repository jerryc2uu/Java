# day18

	<스레드(Thread)>  :  병행 처리  // 서버에서 알아서 해주기 때문에 딱히 신경쓸 필요는 없음

		ex) 채팅 도중 20tb의 파일을 보낼 수 있는가?
			=> cpu는 한 번에 하나의 명령만 처리하므로, 파일을 보내는 동안 채팅할 수 없는 것이 정상
			   그러나 실제론 병행해서 프로그램이 돌아간다.
			   
			   이것이 가능한 이유가 "스레드"
			   
			   +) 파이썬은 스레드 처리가 잘 안 된다. 		
		
	
		+) 자바가 프로그램을 실행시키는 방법
			
			1.	Processor(명령의 최소한의 단위)를 이용하는 방법
				: 운영체제에 의해서 자신이 사용할 메모리를 할당받고 레지스터리에 등록한 후 실행
					(자바의 모든 클래스들은 이 방식이다)
					
			단점	메모리를 따로 할당받기 때문에 폐쇄적이다. 
					각각의 프로세스 프로그램은 원칙적으로
					자신의 데이터를 다른 프로세스 프로그램에게
					주지 못한다.
					(메모리끼리 호환이 되지 않는다.)

				우리가 지금까지 실행한 모든 자바 프로그램은 프로세스를
				이용한 방식으로 실행이 되었다.
				(즉 main 함수부터 시작하는 프로그램은 프로세스 방식을
				실행하게 된다.)
		
			
			2.	Thread를 이용하는 방법
						프로세서가 할당받은 메모리를 빌려서 실행된다.
						프로세서가 종료되면 쓰레드도 종료된다.
				==>		독립적인 메모리를 할당받지 못하고 실행하는 프로그램이다.
						대신 프로세스 프로그램이 사용하는 메모리를
						같이 공유하게 된다. (함수, 변수도 공유 가능)
		
						참고	스레드는 혼자서는 실행되지 못한다.
								반드시 다른 프로세스가 실행된 후 실행되어야 한다.
						장점	스레드 프로그램은 메모리를 같이 사용하므로
								같은 메모리를 사용하는 프로그램끼리는
								데이터 교환이 가능하다.
								
								
								
용어정리
1.	시분할 시스템 (시간을 분할하는 시스템)
			cpu 안의 코어(명령 처리)는 보통 1개, 처리할 수 있는 명령 갯수가 코어의 갯수
			시간을 아주 잘게 분리해서 각 명령에 시간을 할당하는 것이 시분할 시스템
			멀티태스킹이 가능한 이유는 이것 때문
			 
	==>		CPU는 한 순간에는 오직 한개의 프로그램만 실행할 수 있다.
			하지만 여러개의 프로그램이 동시에 실행을 원하면?
			한 찰라에는 한개의 프로그램만 실행하고
			적당한 시간이 되면 그 프로그램을 보내고
			다른 프로그램을 받아서 실행하도록 하고 있다.
			결론
				각각의 프로그램마다 CPU가 실행할 시간을 정한 후
				그 시간만큼만 실행해준다.

2.	우선순위(Priority)
			여러 개의 명령을 동시 실행할 경우 순서가 정해짐
			그때 우선순위가 높은 명령부터 먼저 실행한다.
			
	==>		CPU는 시분할 시스템에 의해서 특정 프로그램을
			자신이 배분한 시간만큼 실행한다.
			시간이 종료되면 다음 프로그램을 실행하게 된다.
			이때 CPU가 다음 프로그램을 선택하는 기준을
			우리는 우선순위라고 말한다.
		
			좀더 쉽게 말하면 우선순위가 높은 프로그램이
			CPU에 의해 먼저 실행된다라는 개념이다.





		<자바에서 Thread 프로그램을 만드는 방법>
		
		
			+) Deprecated가 붙은 함수 : 이 함수가 언제 삭제될지 모르니까 다른 방법을 강구해놓아라...
		
		
		
		1.	Thread 클래스를 상속받아서 만드는 방법
			
			1)	Thread 클래스를 상속받은 클래스를 제작한다.
			
			2)	그 클래스 안에 반드시 run()을 오버라이드해 놓는다.
				프로세스 프로그램의 메인함수와 같은 역할, 스레드가 시작되는 순간 run() 안의 내용이 실행된다.
				병행 처리 해야 할 것들을 이 함수 안에서 정한다.
				(이 함수가 프로세스 방식의 main() 함수에 해당하는 것으로
				스레드 프로그램의 시작함수가 된다.)
				
			3)	run() 함수부터 출발해서 그 프로그램이 하고자 하는 일을
				코딩하면 된다.
		
		
		
		2.	Runnable 인터페이스를 구현해서 만드는 방법 (Thread 클래스가 이것을 구현한 것이므로)
			
			1)	Runnable 인터페이스를 상속받은 클래스를 제작한다.	
			
			2)	그 클래스 안에 반드시 run() 함수를 오버라이드해 놓는다.
				(이 함수가 프로세스 방식의 main() 함수에 해당하는 것으로
				스레드 프로그램의 시작함수가 된다.)
			
			3)	run() 함수부터 출발해서 그 프로그램이 하고자 하는 일을
				코딩하면 된다.

	
	두 가지 방법이 있는 이유는 ?
	
		자바는 단일 상속이기 때문에.
			
	상속은 오직 한개만 허용하므로 만약 여러분이 만드는 프로그램이
	다른 클래스를 또 필요하면 extends Thread를 하는 순간
	다른 클래스는 상속받지 못한다.
	그래서 혹시나 다른 클래스를 필요로 하는 경우를 대비해서
	두가지 방식을 제공하고 있는 것이다.
	
	인터페이스는 추상함수만 모두 오버라이딩 해주면 다중 구현이 가능하다. 이 클래스에 다른 클래스를 상속할 수도 있다.
	
	 
	
	<스레드의 상태>
		
		1. 스레드 상속받은 클래스를 new 시킴 = New Born
		
		2. 1을 실행 가능한 상태로 올려두면 start() = Runnable
		
		3. 2에서 우선순위에 따라 알아서 실행됨 (전위는 개발자가 제어할 수 없음!!) = Run
		
		4. 실행 일시 중단해야 하는 순간 sleep()으로 = Block 
		
		5. 다시 실행 가능 상태로 resume() = Runnable
		
		6. 실행을 완전 종료 stop() = Death
		
		
		
		
		
	
		1. Runnable  상태 : CPU 가 시분할 시스템에 의해서 프로그램을 선택할때
							선택 가능한 프로그램이 모여있는 상태
				
				
				
			* CPU 는 Runnable 상태에 있는 프로그램만 실행할 수 있다.

			
			
			start(); => New Born  상태 -> Runnable로 전위 시키는 명령
						
						이후 자동으로 Run 상태로 전위가 된다.

			참고	실행함수가 run 함수(프로세서 프로그램의 메인함수와 같음)이므로
					직접  run() 를 호출하면 이것은 스레드 처리 동작이 아니고
					프로세서의 한 함수를 호출하는 효과가 된다.
					(병행 처리가 되지 않는다)

		2. Run 상태
		==>		CPU가 우선순위가 높은 특정 프로그램을 실제로 실행하는 상태를 말한다.
				Run 상태에는 오직 한개의 프로그램만 들어갈 수 있다.
				그리고 Runnable -> Run 상태로의 전위는
						오직 운영체제 몫이다.
						(개발자가 손댈 수 없는 부분이다.)
				참고	 Run -> Runnable  상태로 전위는
						1.	운영체제 몫이기도 하고
							(시분할 시스템에 의해서 시간이 만료된 시점)
						2.	yield(); => 개발자가 선택할 수도 있다. 

		<스레드 프로그램이 필요한 이유?>
		
			1.	독립적으로 실행이 필요한 경우 : 여러 클라이언트와 동시에 통신할 수 있어야 하기에.
				예>		서버 프로그램에서는
						각각의 클라이언트와 통신하는 프로그램이
						독립적으로 실행되어야 한다.
						
						즉, 클라이언트와 통신은 다른 작업과 별개로
						독립적으로 실행되어야 할 필요가 있다.
			
			
			2.	백그라운드 작업이 필요한 경우 : 파일을 보내는 동안 채팅을 계속 하는 경우
				예>		그래픽 처리를 할때
						그림을 내부적으로 완성한 후
						메인은 완성된 그림만 이용하도록 하고자 할 경우


	 * <스레드 프로그램을 동작하는 방법>
	 
			1.	Thread 클래스 상속받은 경우 (더 쉬움)
				1)	new 시킨다.		==>	New Born 상태가 된다.
				2)	start 시킨다.		==>	Runnable 상태로 전위시킨다.
			
			2.	Runnable 인터페이스 구현한 경우
				1)	new 시킨다.		==>	일반 클래스를 사용하기 위한 객체지향 방법 (New Born 상태 아님)
				2)	Thread 클래스를 new시키면서 1)의 결과를 넣어준다.
					==>		이순간 New Born이 된다.
				3)	2)의 결과를 이용해서 start 시킨다.
					==>		이순간 Runnable  상태로 전위된다.


		클래스는 여러 번 new 시켜서 여러 객체를 만들 수 있다.
		스레드 프로그램도 하나로 여러 개를 병행 처리 할 수 있다.

		참고
		==>		하나의 스레드 프로그램은 여러번 실행할 수 있다.
				그러면 이들은 각각 독립적으로 실행된다.
				즉, 하나의 스레드 처럼 여러개 프로그램이 실행되어진다.
		
				스레드에 부여된 이름 꺼내오는 방법 :
		
				String	name = Thread.currentThread().getName();
		
				으로 받아서 사용할 수 있다.

			1.	Run -> Runnable 상태로 전위하기
			
				명령어		yield();


				참고	Block 상태란?
						실행을 잠시 중단하는 상태를 말한다.
						Block 상태에 있는 프로그램은 절대로 실행되지 않는다.
						(실행이 가능한 프로그램은 반드시 Runnable에 있어야 가능하다.)
						그리고 Block 상태에서 빠져나오는 방법은 
						오직 Runnable 상태로 전위되는것 뿐이다.
						즉, Block 상태에서 직접 선택해서 실행할 수는 없다.
				
				2.	Run -> Block 상태로 전위하기
				
					명령어		sleep
								==>	이 명령은 시간을 정해주고
									그 시간이 되면 자동적으로 Runnable 상태로
									복귀 시키는 명령이다.
									
									
									
									
		<스레드가 있는 프로그램의 종료>
		스레드 프로그램은 프로세서 프로그램에 종속된다.
		프로세서(메인 프로그램)가 할당받은 메모리의 일부를 다시 할당 받는 게 스레드.
		
		일반적으로 스레드가 존재하지않는 프로세스 프로그램은
		main()이 종료되면 프로그램도 종료된다.
		
		하지만 스레드가 존재하는 프로그램은
		1.	main() 도 종료되고
		2.	스레드도 종료되어야 한다.		
		두가지를 모두 만족해야 프로그램이 종료된다.
		
		스레드 종료 -> 메인 프로세서 종료 순서




1.	스레드를 강제로 종료하는 방법

	명령어		stop();		이 명령은 사용금지 명령이다.

	참고	하지만 자바측에서는 이 함수를 사용 금지 함수로 만들었다.
			대신 스레드를 종료하기 위해서는
			스레드가 스스로 종료되는 방향으로 프로그램을 제작해서
			프로그램이 종료될 수 있도록 처리하도록 한다.
			즉, run()가 자연스럽게 종료되도록 코딩해달라라는 말이다.

	참고	mian()가 종료되면 프로세스 프로그램이 종료되듯이
			run()이 종료되면 스레드 프로그램이 종료된다.

		정리	run()함수는 제어 변수(boolean isStart)를 이용해서 반복하도록 처리한다.
		
				스레드 프로그램은 무한반복 코드가 많이 들어간다.
				결국 조건식을 많이 쓰게 되는데, 조건식을 변수로 만들어놓고 false시는 종료되게 코딩할 수 있다.
				
					while(isStart) {

					}
				
				그리고 스레드가 종료될 필요가 있으면 이 제어변수를
				조작함으로써 run()이 종료되도록 유도한다.
					isStart = false;
					

	참고	한번 Death된 스레드는 다시는 실행하지 못한다.
			만약 재 실행을 원하면
			New Born부터 다시 시작해야 한다.

일시중지하기
	일시중지하기
		suspend() 
	재실행하기
		 resume()			이 두가지 명령 모두 사용 금지 명령이다.
							대신 다음에 설명할 동기화 기법을
							이용해서 처리하도록 해 놓았다.
							
							
=========================================================


<동기화 처리> :

==>		스레드의 장점은 메모리를 공유한다는 사실이다.
		근데 이것이 매우 어려운 내용이다.
		왜냐하면 스레드가 어디까지 실행할지는 모르기 때문이다.
		
	동기화란?
	특정 스레드가 어디까지 실행할지를 묶어두는 기능
	
	같은 내용, 무결성이 깨지지 않은 상태로 작업하기 위해 하는 게 동기화
	
	여러 스레드가 하나의 변수를 동시에 쓴다면?
	만일 한 스레드가 변수의 내용을 바꾼다면 곤란해진다.
	그래서 동기화 처리를 하는 것
	
	
	마찬가지로 서버에서 보내준 내용 그대로 문서가 실행되면 그건 동기 통신
	서버가 준 내용의 일부분을 바꾼다면? 이건 비동기 통신
	
	

		종류
		
		1.	변수의 동기화 : 모든 스레드에서 같은 데이터를 쓸 수 있게 해주는 것
			==>		스레드가 특정 기능을 마칠때 까지 그 변수를 다른
					스레드가 사용하지 못하도록 방지하는 방법
			형식>
				synchronized(변수) {
		
				}
			의미	하나의 스레드가 {}을 모두 실행하는 도중에는
					다른 스레드는 이 변수를 사용하지 못하게 한다
		
		
		
		2.	함수의 동기화
			==>		스레드가 특정 함수를 실행하는 도중에는
					다른 스레드는 그 함수를 사용하지 못하도록 방지하는 방법
		
			형식>		synchronized 반환값 함수이름(매개변수) {
						
						} == 이 함수는 동기화 처리된 함수라는 뜻
						
			의미>		하나의 스레드가 이 함수를 실행하는 도중에는
						다른 스레드는 이 함수를 사용할 수 없도록 한다.
		
			참고	동기화는 항상 성립하는 것이 아니고
					두개 이상의 스레드가 변수나 함수를 공용으로 사용할 
					경우에만 성립하는 것이다.
					만약 두 스레드가 별개의 함수나 변수를 사용하면
					이것은 동기화 처리를 해도 영향을 받지 않는다.
			

		<동기화를 이용 방법>
		
		우리가 보통 2개이상의 스레드를 만든다는 개념은
		두개가 같은일을 할 수도 있지만......
		대부분은 별도로 다른 일을 동시에 하기 위해서 
		만들것이다.
		이때 서로가 공유 데이터가 존재하면 문제가 생길 수 있다.

		하지만 동기화 처리의 문제점은
		한쪽 스레드가 하나의 작업을 완료하기 전에는
		다른 스레드는 작업하지 못하고 대기해야 한다는 사실이다.
		이것은 엄밀히 말하면 스레드가 효과가 없다는 말이다.
		(스레드는 동시 실행을 목표로 하는 것이기 때문에)
		
		
	서로가 병행 처리를 하면서 공유 데이터를 손상시키지 않도록 하는 방법.

		규칙
			1.	특정스레드가 작업을 해서는 안될 시점이 되면
				스스로가 Block 상태로 전위되도록 한다
					wait(); 
					
					==> sleep(); suspend();와 비슷하나 이것들은 동기화에서 쓰는 명령은 아니다.
					
			2.	다른 스레드 입장에서는
				상대방 스레드가 일을 해도 좋은 시점이 되면 깨워준다. 
				=>	Runnable 상태로 복귀시킨다.
					notify();
			★★★★★
			3.	wait(), notify() 는 반드시 동기화 함수안에서만 사용해야 한다.
				
				synchronized 반환값 함수이름(매개변수) {
						wait();
						notify();
						}


자기 자신을 Block으로 만드는 방법
	1.	sleep
		==>		지정한 시간(block에 있다가 알아서 runnable로 가야하니까 시간이 있는 것)동안 스스로를 Block 상태로 만드는 명령
	
	2.	join
		==>		다른 스레드가 종료되기 전까지는 스스로를
				Block 상태로 만드는 명령
					
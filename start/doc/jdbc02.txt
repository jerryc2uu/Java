# jdbc02

SELECT 질의 결과 사용하기

	JDBC에서 SELECT 질의명령을 보내면 그 결과(인라인 테이블)를
	(이 때 만들어지는 인라인테이블은 메모리에 저장된다.)
	ResultSet이라는 인터페이스가 관리하도록 하고 있다.
	
	우리는 ResultSet이라는 인터페이스를 이용해서 인라인테이블의 결과 중에서 필요한 데이터를 선택해서 사용할 수 있다.
	인라인테이블의 결과 중 원하는 데이터를 꺼내는 방법은 
	몇 번째 줄의 몇 번째 칸의 데이터를 꺼내달라 요청하는 게 아니고
	현재 작업 줄의 몇 번째 칸의 데이터를 꺼내달라고 요청하는 방식
	이 때 칸의 의미는 질의명령 중 SELECT 절에 나열된 필드의 순서
	(현재 작업줄 : 가상의 레코드 포인터라고 표현한다.)	
	
	[주요함수]
		1. 가상의 레코드 포인터(현재 작업 위치)를 이동시키는 명령
			
			absolute(int row)
			: 지정한 줄로 이동
			afterLast()
			: EOF(End Of File)로 이동
			beforeFirest()
			: BOF(Begin Of First)로 이동
			first()
			: 첫 번째 행으로 이동
			last()
			: 데이터 있는 마지막 행으로 이동
			next()
			: 현재 작업줄에서 다음줄로 이동
			previous()
			: 현재 작업줄에서 바로 이전줄로 이동
			
			[참고]
			 
			 afterlast()
			 beforeFirst() 
			 : 항상 이동에 성공. 왜냐하면 BOF, EOF는 인라인테이블이 완성되면 자바가 자동으로 만들어주는 가상의 위치이므로
			   항상 존재. 이외의 함수들은 이동에 실패할 수 있다.
			   
		2. 데이터 꺼내는 함수
			
			getXXX()
			: XXX는 꺼낼 데이터를 사용할 데이터 타입
			
			[주의]
				실제 데이터베이스에서 사용하던 타입이 아니고
				자바에서 사용하고 싶은 타입을 넣어야 한다.
				(데이터베이스에 있는 형태로 달라도 상관 없다.)
			
			EX) 나이를 꺼낸다면 
				데이터베이스 : NUMBER
				jdbc : int
				
				급여
				db : NUMBER
				jdbc : int	
		
		[참고]
			꺼내는 방식
				1. getXXX(int 위치값)
					
					위치값 = SELECT절에서 나열한 필드의 순서
					(자바는 인덱스가 0부터 시작하지만, jdbc는 데이터베이스를 다루기에 1부터 시작)
				
				2. getXXX(String 필드이름)
					
					필드이름으로 꺼내는 방식
					
				[주의]
					질의명령이
						
						SELECT
							ename as 이름
						FROM
							emp
						;
					인 경우 꺼낼 때는
					
					getString("ename") ==> (x)
					getString("이름")  ==> (o)
			
			SELECT 질의명령 실행하면
			ResultSet으로 결과가 만들어지고
			먼저 필요한 행으로 레코드 포인터를 이동한 후
			필요한 데이터를 하나씩(한 행씩) 꺼내야 한다. 	


<PreparedStatement>
: 질의명령을 데이터베이스에 전달하는 Statement의 일종

  Statement의 불편한 점은 질의명령을 실행할 때마다 매번 질의명령을 데이터베이스에게 전달하는 형식을 취한다는 것
  그런데 질의명령이 긴 경우도 있다.
  데이터베이스 서버는 네트워크를 사용한다. 
  
  문제점을 해결하기 위한 다른 Statement를 준비했는데 이것이 PreparedStatement이다.
  이것은 미리 질의명령을 알려준 후 실행이 필요하면 실행만 해달라고 요구하면 되는 형식이다.
  매번 질의명령을 알려줄 필요가 없다는 것이다.
  
  작업을 하다보면 매번 같은 질의명령을 실행할 필요가 있을 때가 있다.
  그런데 일반 Statement로는 매번 같은 질의명령이라도 다시 보내야 한다.
  이런 경우 미리 질의명령을 알려주는 전속 Statement를 만들어 놓고
  질의명령은 보내지 말고 실행만 부탁한다면 처리속도가 그만큼 빨라지고 코드 작성도 편해진다. 
 
	[만드는 방법]
		con.prepareStatement();
	
	[참고]
		자주 사용되는 질의명령이라도 데이터는 달라질 수 있다.
		이 문제를 해결하는 방법으로 질의명령을 만들 때 변화되는 데이터 부분은 ?로 대신한다.
		이후 ? 부분만 질의명령을 실행하기 직전에 채워넣고 질의명령을 실행하는 방식을 사용하고 있다.
		
		[예]
			String sql = "SELECT * FROM emp WHERE ename = ? "
			
			[주요함수]
				? 채워주는 함수
				
				setXXX(위치값, 데이터);
					
					XXX = 채울 데이터의 타입(자바)
				
					위치값 = 질의명령 내에서 몇번째 ? 인지
					
					데이터 = 채울 데이터
			
			[참고]
				Statement는 속도는 느리지만 매번 다른 질의명령을 처리할 수 있다.
				PreparedStatement는 속도는 빠르지만 항상 동일한 질의명령만 처리할 수 있다.	
				
					
	1. dno라는 문자열을 입력받으면 부서번호를 입력받아서 
 	해당 부서의 부서원들의 사원번호, 사원이름, 직급, 입사일, 급여, 부서번호, 부서이름, 부서위치 출력해주고
 	
 	
 	SELECT
 		empno, ename, job, hiredate, sal, e.deptno, dname, loc
 		
 	FROM
 		emp e, dept d
 	WHERE
 		e.deptno = d.deptno
 		AND e.deptno = ?
 		
 				
 	2. job이라는 문자열을 입력받으면 해당 직급을 가진 사원들의
 		사원번호, 사원이름, 직급, 입사일, 급여, 급여등급, 커미션 조회
  	
  	SELECT
 		empno, ename, job, hiredate, sal, grade, NVL(TO_CHAR(comm), '커미션없음') comm	=> NVL 함수 내에서는 두 데이터 타입이 같아야함
 	FROM
 		emp, salgrade 
 	WHERE
 		sal BETWEEN losal AND hisal
 		AND job = ?
 	
 	
 	0. all 입력받으면 
 		모든 사원들의 사원번호, 사원이름, 직급, 입사일 조회하는 프로그램 작성 
 	
 	
 	
 	SELECT
 		empno, ename, job, hiredate 
 	FROM
 		emp	

	<<데이터 타입>>
	
		<논리>
			boolean : 1byte
		----
		<문자>
			char : 2byte (아스키코드 값으로 처리하나 정수 타입은 절대 아니다.)
		----
		<정수>
			byte : 1byte
			short : 2byte
			int : 4byte
			long : 8byte
		----
		<실수>
			float : 4byte
			double : 8byte

===============================
		
	<<변수>>
		:	모든 데이터는 메모리에 올라간다. 그런데 자바에서는 메모리의 위치(주소)를 알 수가 없다.
			결국 변수는 데이터의 위치(주소)를 기억하기 위해 사용하는 것이다.
			
			데이터 자체는 리터럴 풀, 기본형 데이터의 변수는 스택 영역에 기억된다.
			참조형 데이터의 변수는 힙 영역에 데이터 자체는 리터럴 풀에 쌓인다.
		
		[형식]
		
			1. 접근지정자 [속성] 데이터타입 변수이름 = 데이터;
		
			2. 접근지정자 [속성] 데이터타입 변수이름;
			   변수이름 = 데이터;
			   
		[종류]
			
			1. 기본형 변수 : 기본 데이터 타입(8가지)
			
			2. 참조형 변수 : 클래스 타입
							 Object 타입 변수에 입력 가능
							 heap에 인스턴스를 만드는 경우 그 주소를 기억하는 변수
							  
				[예]
					Integer no = 10;
					
					Object obj = no;
			
					public void abc() {
						int a = 10;		
					}
					
					public class Abc {
						int a = 10;  ==> heap에 올라감, 클래스 실행 동안은 사용 가능
					}
									
				
	
		[참고]
			
			식별자 : 자바의 예약어들은 사용 불가.. 특수문자는 _, $ 외에 사용 불가
					 시작 문자로 숫자 사용 불가
					 한글 대신 영어 권장
		
============================		
			
	<<연산자>>
		
		1. 산술 연산자
		
	*	2. 논리 연산자 : 논리값(true or false) 연산
			
				&	
				&&	:	절삭 연산 (앞이 거짓이면 뒤 스킵)
				|		
				||	:	절삭 연산 (앞이 참이면 뒤 스킵) 
				
		3. 비교 연산자
		
		4. 증감 연산자
		
		5. 대입 연산자
		
		6. 3항 연산자 :	
		 
============================	 

	<<제어문>>
	
		1. 반복문
			
			for(int i = 0; i < 10 ; i++) {
				System.out.println(i)
			}
				System.out.println("끝")
			
			/*
				i
				0	==> 0
				1	==> 1
				2
				...
				10	==> "끝"
			*/
			
			for(int i = 0 ; i < 10; i++) {
				for(int j = 0 ; j <= i ; j++) {
					System.out.print(j+1);	
				}
			}
			
			*	(0, 0)
			**	(1, 0) (1, 1)
			***	(2, 0) (2, 1) (2, 2)
			**** (3, 0) (3, 1) (3, 2) (3, 3)
			***** (4, 0) (4, 1) (4, 2) (4, 3) (4, 4)
			
			1								
			1 2
			1 2 3
			1 2 3 4 5
			1 2 3 4 5 6
				
					
		2. 조건문
		
=======================

	<<함수(Method)>>
		
		1. 반환값과 매개변수 
		
			반환값의 경우 void로 처리하고 실행 
			매개변수의 경우 입력 안 하고 함수 호출 => 결과 이상하면 변경
		
			int cnt = pstmt.executeUpdate(); => 변경된 행 수
		
		2. static member
			
			추상클래스 : new 불가능, 속성이 static이고 반환값이 자기자신인 함수 호출
	
========================

	<<클래스>>
		[형식]
			접근지정자 	[속성]	class	클래스이름 {
				변수;
				함수;
			}
				
				[속성]
					abstract : 추상클래스
					final : 상속 불가 클래스		
				
				[접근지정자]
					public, 생략
					
				
				java.lang 패키지 내의 클래스들의 멤버는 대부분 static이다.
				static 멤버는 new 사용 불필요
				static 멤버 안에서는 this(heap 주소 기억하는 변수) 사용 불가
				
				
				클래스 만드는 이유?
					관련 있는 멤버들을 용도별로 모아놓기 위해서...
					
				Map.entry : 키값과 value값을 쌍으로 모아놓은 vo 클래스

=======================

	<<배열>>
0		* 		' ' : 4, * : 1	=> 5
1	   ***		' ' : 3, * : 3	=> 6
2	  *****		' ' : 2, * : 5  => 7
3	 *******	' ' : 1, * : 7  => 8
4	*********	' ' : 0, * : 9	=> 9
=======================
	<<조건문>>
		
		if(조건1) {
			System.out.println("조건1이 참이다");	=> 함수1()
		} else if(조건2) {
			System.out.println("조건2 참이다");
		} else if(조건3) {
			System.out.println("조건3 참이다");		
		} else if(조건4) {
			System.out.println("조건4 참이다");
		}
		
		함수1
		함수2
		함수3
		함수4
=======================
	<<반복문>>
	
		for(int i = 0 ; i < 10 ; i++) {
			for(;;) {
			
			}
		}
		
		for(int i = 2 ; i < 10 ; i++) {
			for(int j = 1 ; j < 10 ; j++) {
				System.out.println(i + " x " + j + " = " + (2*j))
			}
			System.out.println();
		}
=======================

	<<컬렉션>>
	
		데이터 여러 개 관리하는 방법
			
			1. 저장
				list, set : add()
				map : put()
				 
			2. 꺼내서 사용
				list, map : get(인덱스), get(키값)
				set : iterator 변환, list 계열로 변환 // 멋대로 정렬해서 보관, 개발자가 그 위치를 알 수 없음
				
=======================
	
	<<인터페이스 / 추상클래스>>

	
	
	JSP Project 트리
		
		dispatch : 요청이 오면 
		controller	
		dao
		sql
		db
		util
		
========================

1. 'SMITH' 사원의 사원번호 또는 직급 조회
  
  Statement
  PreparedStatement
 
2. 'SMITH' 사원의 모든 정보 조회 VO
 
3. 20번 부서의 모든 사원의 정보를 조회해서 출력 ArrayList<EmpVO>

4. 부서번호 입력받아서 처리



			